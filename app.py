import streamlit as st
from utils.ai_generators import generate_images
from utils.climate_data import get_climate_info
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Page configuration
st.set_page_config(
    page_title="Climate Change Awareness",
    page_icon="üåç",
    layout="wide"
)

# Custom CSS
def load_css():
    with open("assets/styles.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_css()

def main():
    # Sidebar
    with st.sidebar:
        st.title("üåç Climate Vision")
        location = st.text_input("Enter Location")
        issue = st.selectbox(
            "Select Climate Issue",
            [
                "Rising Sea Levels",
                "Deforestation",
                "Air Pollution",
                "Plastic Pollution",
                "Global Warming",
                "Ocean Acidification"
            ]
        )
        if st.button("Generate Insights", type="primary"):
            if location and issue:
                with st.spinner("Generating images and insights..."):
                    try:
                        images = generate_images(location, issue)
                        if images:
                            climate_info = get_climate_info(issue)
                            st.session_state.images = images
                            st.session_state.climate_info = climate_info
                            st.session_state.show_results = True
                        else:
                            st.error("Failed to generate images. Please try again.")
                    except Exception as e:
                        st.error(f"An error occurred: {str(e)}")
            else:
                st.error("Please fill in all fields")

    # Main content
    st.title("Climate Change Awareness")
    
    if 'show_results' in st.session_state and st.session_state.show_results:
        # Display generated images in columns
        st.subheader("AI Generated Visualizations")
        cols = st.columns(3)
        
        for idx, (platform, image_url) in enumerate(st.session_state.images.items()):
            with cols[idx]:
                st.image(image_url, caption=f"Generated by {platform}")
                if st.button(f"Save {platform} Image", key=f"save_{idx}"):
                    # Add save functionality
                    st.download_button(
                        label="Download Image",
                        data=image_url,
                        file_name=f"climate_{platform}.png",
                        mime="image/png"
                    )
                
                if st.button(f"Share {platform} Image", key=f"share_{idx}"):
                    # Add share functionality
                    st.markdown(f"""
                    Share on:
                    - [Twitter](https://twitter.com/intent/tweet?url={image_url})
                    - [Facebook](https://www.facebook.com/sharer/sharer.php?u={image_url})
                    - [LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url={image_url})
                    """)

        # Display climate information
        st.subheader("Climate Impact Analysis")
        tabs = st.tabs(["Causes", "Effects", "Solutions"])
        
        with tabs[0]:
            st.markdown(st.session_state.climate_info['causes'])
        with tabs[1]:
            st.markdown(st.session_state.climate_info['effects'])
        with tabs[2]:
            st.markdown(st.session_state.climate_info['solutions'])

if __name__ == "__main__":
    main() 